// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux16(a= instruction, b= internalOutM, sel= instruction[15], out= aOrCInst);
    Mux(a= true, b= instruction[5], sel= instruction[15], out= loadAReg);
    ARegister(in= aOrCInst, load= loadAReg, out= aRegOut, out[0..14]= addressM);
    Mux16(a= aRegOut, b= inM, sel= instruction[12], out= aluB);
    And(a= instruction[4], b= instruction[15], out= loadDReg);
    DRegister(in= internalOutM, load= loadDReg, out= aluA);
    And(a= instruction[3], b= instruction[15], out= writeM);
    ALU(x= aluA, y= aluB, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= outM, out= internalOutM, zr= zr, ng= ng);
    
    Or(a= ng, b= zr, out= zeroOrNeg);
    Not(in= zeroOrNeg, out= pos);
    And(a= pos, b= instruction[0], out= JGT);
    And(a= zr, b= instruction[1], out= JEQ);
    And(a= ng, b= instruction[2], out= JLT);

    Or(a= JLT, b= JEQ, out= JLE);
    Or(a= JGT, b= JLE, out= jumpToA);

    And(a= instruction[15], b= jumpToA, out= pcLoad); 
    Not(in= pcLoad, out= pcInc);
    
    PC(in= aRegOut, load= pcLoad, inc= pcInc, reset= reset, out[0..14]= pc);
}